//
//  TableStoryboardExtensions.swift
//
//  This file is automatically generated; do not modify.
//

import UIKit

private let sharedStoryboardInstance = UIStoryboard(name: "Table", bundle: nil)

private class InitializeBlockObject {
    
    let block: (UIViewController -> Void)
    
    init(block: (UIViewController -> Void)) {
        self.block = block
    }
    
}

extension TableViewController {
    
    final class func instantiateViewControllerFromStoryboard(@noescape initialize: ((tableViewController: TableViewController) -> Void) = {_ in}) -> TableViewController {
        let viewController = sharedStoryboardInstance.instantiateViewControllerWithIdentifier("TableViewController") as! TableViewController
        initialize(tableViewController: viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destinationViewController)
        }
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case AccountBalance = "AccountBalance"
        case AccountName = "AccountName"
        case LegalNotes = "LegalNotes"
    }
    
    final func dequeueAccountBalanceCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((accountBalanceCell: AccountBalanceTableViewCell) -> Void) = {_ in}) -> AccountBalanceTableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.AccountBalance.rawValue, forIndexPath: indexPath) as! AccountBalanceTableViewCell
        initialize(accountBalanceCell: tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountNameCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((accountNameCell: AccountNameTableViewCell) -> Void) = {_ in}) -> AccountNameTableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.AccountName.rawValue, forIndexPath: indexPath) as! AccountNameTableViewCell
        initialize(accountNameCell: tableViewCell)
        return tableViewCell
    }
    
    final func dequeueLegalNotesCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((cell: UITableViewCell) -> Void) = {_ in}) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.LegalNotes.rawValue, forIndexPath: indexPath)
        initialize(cell: tableViewCell)
        return tableViewCell
    }
    
}

extension ViewController {
    
    final class func instantiateViewControllerFromStoryboard(@noescape initialize: ((viewController: ViewController) -> Void) = {_ in}) -> ViewController {
        let viewController = sharedStoryboardInstance.instantiateViewControllerWithIdentifier("ViewController") as! ViewController
        initialize(viewController: viewController)
        return viewController
    }
    
    // Segues
    
    func handleSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if let initializeBlockObject = sender as? InitializeBlockObject {
            initializeBlockObject.block(segue.destinationViewController)
        }
    }
    
    // Table View Cells
    
    enum TableViewCellIdentifier: String {
        case AccountBalance = "account-balance-cell"
        case AccountName = "account-name-cell"
        case LegalNotes = "legal-notes-cell"
    }
    
    final func dequeueAccountBalanceCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((accountBalanceCell: AccountBalanceTableViewCell) -> Void) = {_ in}) -> AccountBalanceTableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.AccountBalance.rawValue, forIndexPath: indexPath) as! AccountBalanceTableViewCell
        initialize(accountBalanceCell: tableViewCell)
        return tableViewCell
    }
    
    final func dequeueAccountNameCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((accountNameCell: AccountNameTableViewCell) -> Void) = {_ in}) -> AccountNameTableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.AccountName.rawValue, forIndexPath: indexPath) as! AccountNameTableViewCell
        initialize(accountNameCell: tableViewCell)
        return tableViewCell
    }
    
    final func dequeueLegalNotesCellFrom(tableView: UITableView, forIndexPath indexPath: NSIndexPath, @noescape initialize: ((cell: UITableViewCell) -> Void) = {_ in}) -> UITableViewCell {
        let tableViewCell = tableView.dequeueReusableCellWithIdentifier(TableViewCellIdentifier.LegalNotes.rawValue, forIndexPath: indexPath)
        initialize(cell: tableViewCell)
        return tableViewCell
    }
    
}
